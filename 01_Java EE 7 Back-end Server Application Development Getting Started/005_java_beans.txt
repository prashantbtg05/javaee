							#005 : Java Beans
			===================================================================================================
				01.	Java Beans
			===================================================================================================
	There are a number of Java technologies that are used when developing Java Enterprise Edition applications that are actually components of the Java Standard Edition platform. Three examples of these technologies are JavaBeans, Logging, and Annotations. A JavaBean is a reusable component that contains business logic for the application.  A JavaBean can be used to create a visual component for a web application [For example, an Abstract Window Toolkit (AWT) or a JSF GUI element.] or can be used to expose objects programmatically to web application. A common use for JavaBeans is to create an invisible component that provides flow control or data access
	
			===================================================================================================
				02. Working with java beans
			===================================================================================================
	A JavaBean is a plain old Java object
		Criteria
			1> the class does not require a parent class
			2> there must be a constructor defined within the JavaBeans class that does not accept any arguments. This is known as a zero argument constructor
			3> properties must be defined with getter and setter methods.
			4> other methods are to be built as regular methods. 
		[img: bean_attributes.PNG]
	
	Persistence [img: bean_persistence.PNG]
	A JavaBean class must support persistence, which is a Java specification for managing and accessing data between Java objects. 
	JavaBean can support persistence in one of two ways
		the serializable functionality - using ObjectInputStream and the ObjectOutputStream classes
		the externalizable functionality - using XMLEncoder and XMLDecoder classes.
		
	The benefit of using the XML encoder and decoder methods is that it will make the application portable. Whereas with object serialization, the class may not be portable